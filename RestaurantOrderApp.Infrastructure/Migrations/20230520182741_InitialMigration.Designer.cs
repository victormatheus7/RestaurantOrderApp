// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RestaurantOrderApp.Infrastructure.Database;

#nullable disable

namespace RestaurantOrderApp.Infrastructure.Migrations
{
    [DbContext(typeof(RestaurantOrderAppContext))]
    [Migration("20230520182741_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RestaurantOrderApp.Domain.Entities.Dish", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_date")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("dishes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 0,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "eggs"
                        },
                        new
                        {
                            Id = 1,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Toast"
                        },
                        new
                        {
                            Id = 2,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "coffee"
                        },
                        new
                        {
                            Id = 3,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "steak"
                        },
                        new
                        {
                            Id = 4,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "potato"
                        },
                        new
                        {
                            Id = 5,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "wine"
                        },
                        new
                        {
                            Id = 6,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "cake"
                        });
                });

            modelBuilder.Entity("RestaurantOrderApp.Domain.Entities.DishType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_date")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("dish_types", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "entrée"
                        },
                        new
                        {
                            Id = 2,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "side"
                        },
                        new
                        {
                            Id = 3,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "drink"
                        },
                        new
                        {
                            Id = 4,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "dessert"
                        });
                });

            modelBuilder.Entity("RestaurantOrderApp.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<int>("Sequence")
                        .HasColumnType("integer")
                        .HasColumnName("sequence");

                    b.Property<int?>("DishId")
                        .HasColumnType("integer")
                        .HasColumnName("dish_id");

                    b.Property<int>("DishTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("dish_type_id");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_date")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("TimeOfDayId")
                        .HasColumnType("integer")
                        .HasColumnName("time_of_day_id");

                    b.HasKey("Id", "Sequence");

                    b.HasIndex("DishId");

                    b.HasIndex("TimeOfDayId");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("RestaurantOrderApp.Domain.Entities.OrderPossibility", b =>
                {
                    b.Property<int>("TimeOfDayId")
                        .HasColumnType("integer")
                        .HasColumnName("time_of_day_id");

                    b.Property<int>("DishTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("dish_type_id");

                    b.Property<int>("DishId")
                        .HasColumnType("integer")
                        .HasColumnName("dish_id");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_date")
                        .HasDefaultValueSql("now()");

                    b.HasKey("TimeOfDayId", "DishTypeId");

                    b.HasIndex("DishId");

                    b.HasIndex("DishTypeId");

                    b.ToTable("order_possibilities", (string)null);

                    b.HasData(
                        new
                        {
                            TimeOfDayId = 0,
                            DishTypeId = 1,
                            DishId = 0,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            TimeOfDayId = 0,
                            DishTypeId = 2,
                            DishId = 1,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            TimeOfDayId = 0,
                            DishTypeId = 3,
                            DishId = 2,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            TimeOfDayId = 1,
                            DishTypeId = 1,
                            DishId = 3,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            TimeOfDayId = 1,
                            DishTypeId = 2,
                            DishId = 4,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            TimeOfDayId = 1,
                            DishTypeId = 3,
                            DishId = 5,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            TimeOfDayId = 1,
                            DishTypeId = 4,
                            DishId = 6,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("RestaurantOrderApp.Domain.Entities.TimeOfDay", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_date")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("times_of_day", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 0,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "morning"
                        },
                        new
                        {
                            Id = 1,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "night"
                        });
                });

            modelBuilder.Entity("RestaurantOrderApp.Domain.Entities.Order", b =>
                {
                    b.HasOne("RestaurantOrderApp.Domain.Entities.Dish", "Dish")
                        .WithMany()
                        .HasForeignKey("DishId");

                    b.HasOne("RestaurantOrderApp.Domain.Entities.TimeOfDay", "TimeOfDay")
                        .WithMany()
                        .HasForeignKey("TimeOfDayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("TimeOfDay");
                });

            modelBuilder.Entity("RestaurantOrderApp.Domain.Entities.OrderPossibility", b =>
                {
                    b.HasOne("RestaurantOrderApp.Domain.Entities.Dish", "Dish")
                        .WithMany()
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RestaurantOrderApp.Domain.Entities.DishType", "DishType")
                        .WithMany()
                        .HasForeignKey("DishTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RestaurantOrderApp.Domain.Entities.TimeOfDay", "TimeOfDay")
                        .WithMany()
                        .HasForeignKey("TimeOfDayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("DishType");

                    b.Navigation("TimeOfDay");
                });
#pragma warning restore 612, 618
        }
    }
}
